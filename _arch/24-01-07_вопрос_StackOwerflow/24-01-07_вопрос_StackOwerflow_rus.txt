Мне необходимо оптимизировать код, который перебирает только нужные комбинации строк из таблицы (списка)

Программа проверяет родство лошадей. Мне не нужно перебирать все возможные комбинации строк из существующей таблицы (списка идентификационных номеров лошадей).
Код должен учитывать логические правила:
1. Ребенок не может быть своим родителем.
2. Если для данного ребенка в качестве Родителя1/2 уже указаны две id-лошади из списка, повторять эту комбинацию поменяв местами родителей 2/1 не нужно.

В программе перебор дополнительных комбинации id-лошадей существенно увеличивают время выполнения программы. Мне нужно сократить количество комбинаций до минимума

Я должен предоставить все строки в опции: ребенок и родители в качестве входных данных для функции (def search_for_parents).
Вот пример таблицы:
```
df = [10, 11, 12, 13]  
```
Вот нужный результат возможных комбинаций, полученных из списка:
```none
№Comb; child; parent1; parent2;  
0;     10;     11;       12;  
1;     10;     11;       13;  
2;     10;     12;       13;  
3;     11;     10;       12;  
4;     11;     10;       13;  
5;     11;     12;       13;  
...  
9;     13;     10;       11;  
10;    13;     10;       12;  
11;    13;     11;       12;  
```
Мой цикл:

```
    for child in range(len(df)):
        for parent1 in range(len(df)):
            for parent2 range(len(df)):
                if child != parent1 and child != parent2:
                    if  parent1 != parent2:
                            answ = search_for_parents(child, parent1, parent2)

```
но текущий код перечисления данных делает так, что одни и те же данные принимаются в качестве входных дважды.
Как я могу оптимизировать код, который берет данные из таблицы?

ОТВЕТ:
РАБОТАЮЩИЙ:
combinations = []
for child in range(len(df)):
    for parent1 in range(len(df)):
        for parent2 in range(parent1 + 1, len(df)):  # Избегаем повторений, начиная от parent1+1
            if child != parent1 and child != parent2:
                combination = (df[child], df[parent1], df[parent2])
                reversed_combination = (df[child], df[parent2], df[parent1])
                if combination not in combinations and reversed_combination not in combinations:
                    combinations.append(combination)
                    answ = search_for_parents(combination[0], combination[1], combination[2])
ПРАВИЛЬНЫЙ????
Вам тогда нужны не комбинации, а размещения

Питоном их можно генерить, если в функцию permutations передавать параметр с длиной
https://docs.python.org/3/library/itertools.html#itertools.permutations
И плюсом своим кодом кешировать результат для каждой тройки, сортируя родителей по возрастанию, чтобы 2 раза не проверять родство одну и ту же пару родителей

Если же функция search_for_parents это не черная коробка, а ваш код и данные по родству лошадей есть у вас в коде, а не во внешнем хранилище, то я бы построил граф, где вершина это лошадь, а ребро A->B означает, что А является ребенком B
Тогда ваше решение будет не генерация всех размещений, а просто обход графа в глубину